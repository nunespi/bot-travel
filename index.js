require("dotenv").config();
const TelegramApi = require("node-telegram-bot-api");

const bot = new TelegramApi(process.env.API_KEY_BOT, { polling: true });

console.log("ntcn");

bot.on("message", async (msg) => {
  try {
    const text = msg.text;
    const chatId = msg.chat.id;
    const username = msg.from.username;

    if (text) {
      if (text === "/start") {
        await bot.sendMessage(
          chatId,
          `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç –∫–∞–Ω–∞–ª–∞ <a href='https://t.me/adventuresRF'>"–î–Ω–µ–≤–Ω–∏–∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞"</a> üôÇ \n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ —Å–≤–æ–∏—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö –∏ —Å—Ç—Ä–∞–Ω—Å—Ç–≤–∏—è—Ö.`,
          {
            parse_mode: "HTML",
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [[{ text: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data: "share" }]],
            },
          }
        );
      } else {
        await bot.sendMessage(process.env.ADMIN_ID_CHAT, `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —é–∑–µ—Ä–∞ @${username}: ${text}`);
        await bot.sendMessage(
          chatId,
          `–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å! –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è —Å –≤–∞—à–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏ –æ–ø—É–±–ª–∏–∫—É–µ–º –∏—Ö –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ. \n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ <a href='https://t.me/adventuresRF'>"–î–Ω–µ–≤–Ω–∏–∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞"</a> üôÇ`,
          {
            parse_mode: "HTML",
            disable_web_page_preview: true,
            reply_markup: {
              inline_keyboard: [[{ text: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –µ—â–µ", callback_data: "share" }]],
            },
          }
        );
      }
    }
  } catch (error) {
    console.log(error);
  }
});

bot.on("callback_query", async (ctx) => {
  const chatId = ctx.chat?.id;
  try {
    console.log(ctx);
    switch (ctx.data) {
      case "share":
        await bot.deleteMessage(ctx.message.chat.id, ctx.message.message_id);
        await bot.sendMessage(
          ctx.message.chat.id,
          "–ü—Ä–∏—à–ª–∏—Ç–µ –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤–∞—à–µ–≥–æ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è üå≤"
        );
        break;
    }
  } catch (error) {
    console.log(error);
  }
});

bot.on("photo", async (img) => {
  try {
    await bot.sendPhoto(process.env.ADMIN_ID_CHAT, img.photo[img.photo.length - 1].file_id, {
      caption: `@${img.from.username}`,
    });
    await bot.sendMessage(
      img.chat.id,
      "–û—Ç–ª–∏—á–Ω–æ! –ê —Ç–µ–ø–µ—Ä—å –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ–º–Ω–æ–≥–æ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ–± —ç—Ç–æ–º –º–µ—Å—Ç–µ –∏ –æ –≤–∞—à–∏—Ö –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è—Ö üå∑"
    );
  } catch (error) {
    console.log(error);
  }
});
